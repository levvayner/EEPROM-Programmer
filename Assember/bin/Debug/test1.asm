
;        ORG 600H    ; define location in code to be allocated starting 100
.data
DS_ST   DB  **      ; Define variable ZERO with value of 0
ONE     DB  1       ; Define variable ONE with value of 1
WORD    DB  5 DUP(?); Define 5 spaces for a word
SS_I    DB  10H     ; Segment for stack
ST_TOP  EQU 254     ; set ST_TOP as constant euqal to 254
Chars   DB  'a','b','c','d','e','f'; bunch of chars
DS_END  DB  *       ; point to address of ending of data
;

.code     
;AUTOGENERATED       CALL Setup  ;  setup system

        CALL Add    ;  calls the add loop/test function
        CALL St_tst ;  calls the stack test function

        LD  A, 255  ;  load a with 255
        OUT  A      ;  Output A to signify we are done.
        HLT         ;  stop operation
;NOW AUTO GENERATED 
;    PROC Setup
;        LDI A, 6    ;  initialize A for DS offset for 0x600
;        MOV DS, A   ;  load data segment with value in A_IN
;        LD B, SS_I  ;  get variable for segment register
;        MOV SS, B   ;  load segment register with value

;        LD A, ST_TOP;  set up stack pointer
;        MOV SP, A   ;  set up stack pointer
;        RET         ;  return to caller
;    ENDP            ;  end of setup proc


    ORG 100h        ;  set up procedures in 100h block
    PROC Add FAR    ;  start procedure that can be called from afar
        LD  A,ONE   ;  load value of A_IN into register A;
        LD  B, DS_ST;  load value of A_IN into register A;
        LDI C, 40H  ;  load register C with 0x40, just to see that we have it, WILL SEE LATER
Add1:   ADD A       ;  responsible for adding A to B, and outputing to A.
        OUT A       ;  outputs result to screen
        JNZ Add1    ;  if not zero, jumps back to adding 1.
        RET         ;  return from the function
    ENDP;
    PROC St_tst FAR ;  start procedure
        MOV A, SP   ;  get value of stack pointer into A
        LD  B, 2    ;  put 2 into B register
        MOV C, SP   ;  Save stack pointer to C register
        OUT C       ;  Output value of C register to numeric display
                    ;  now lets see if we add and wind, or unwind
        ADD         ;  Substract zero from SP
        JZ Unwind   ;  Unwind stack if we are at the top
        CALL St_tst ;  otherwise wind up
Unwind:
        RET         ;  return to previous function call
     ENDP;
END                 ;  end of code


        
